{"version":3,"sources":["../../ts/public/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["///<reference path=\"app/headers/common.d.ts\" />\nSystem.register(['lodash', 'app/core/utils/datemath', './sql_series', './sql_query', './response_parser'], function(exports_1) {\n    var lodash_1, dateMath, sql_series_1, sql_query_1, response_parser_1;\n    var SqlDatasource;\n    return {\n        setters:[\n            function (lodash_1_1) {\n                lodash_1 = lodash_1_1;\n            },\n            function (dateMath_1) {\n                dateMath = dateMath_1;\n            },\n            function (sql_series_1_1) {\n                sql_series_1 = sql_series_1_1;\n            },\n            function (sql_query_1_1) {\n                sql_query_1 = sql_query_1_1;\n            },\n            function (response_parser_1_1) {\n                response_parser_1 = response_parser_1_1;\n            }],\n        execute: function() {\n            SqlDatasource = (function () {\n                /** @ngInject */\n                function SqlDatasource(instanceSettings, $q, backendSrv, templateSrv) {\n                    this.$q = $q;\n                    this.backendSrv = backendSrv;\n                    this.templateSrv = templateSrv;\n                    this.type = 'sqldb';\n                    this.username = instanceSettings.username;\n                    this.password = instanceSettings.password;\n                    this.name = instanceSettings.name;\n                    this.database = instanceSettings.database;\n                    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n                    this.supportAnnotations = true;\n                    this.supportMetrics = true;\n                    this.responseParser = new response_parser_1.default();\n                    this.url = instanceSettings.url;\n                    this.dbms = (instanceSettings.jsonData || {}).dbms;\n                }\n                SqlDatasource.prototype.query = function (options) {\n                    var _this = this;\n                    var queryTargets = [];\n                    var i, y;\n                    var allQueries = lodash_1.default.map(options.targets, function (target) {\n                        if (target.hide) {\n                            return [];\n                        }\n                        if (target.timeColDataType === undefined) {\n                            return [];\n                        }\n                        queryTargets.push(target);\n                        var arr = target.timeColDataType.split(':');\n                        target.timeCol = arr[0].trim();\n                        target.timeDataType = arr[1].trim();\n                        var queryModel = new sql_query_1.default(target, _this.templateSrv, options.scopedVars);\n                        queryModel.dbms = _this.dbms;\n                        var query = queryModel.render(true);\n                        query = _this._replaceQueryVars(query, options, target);\n                        return query;\n                    }).join(\";\");\n                    allQueries = this.templateSrv.replace(allQueries, options.scopedVars);\n                    return this._seriesQuery(allQueries).then(function (data) {\n                        if (!data || !data.results) {\n                            return [];\n                        }\n                        var seriesList = [];\n                        for (i = 0; i < data.results.length; i++) {\n                            var result = data.results[i];\n                            if (!result || !result.series) {\n                                continue;\n                            }\n                            var target = queryTargets[i];\n                            var alias = target.alias;\n                            if (alias) {\n                                alias = _this.templateSrv.replace(target.alias, options.scopedVars);\n                            }\n                            var sqlSeries = new sql_series_1.default({ series: data.results[i].series, table: target.table, alias: alias });\n                            switch (target.resultFormat) {\n                                case 'table': {\n                                    seriesList.push(sqlSeries.getTable());\n                                    break;\n                                }\n                                default: {\n                                    var timeSeries = sqlSeries.getTimeSeries();\n                                    for (y = 0; y < timeSeries.length; y++) {\n                                        seriesList.push(timeSeries[y]);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                        return { data: seriesList };\n                    });\n                };\n                ;\n                SqlDatasource.prototype.annotationQuery = function (options) {\n                    var timeDataType = options.annotation.timeDataType;\n                    if (!options.annotation.query || options.annotation.query === '') {\n                        var castTimeCol = '';\n                        if (this._abstractDataType(timeDataType) === 'timestamp') {\n                            castTimeCol = this._ts2Num('$timeColumn', timeDataType);\n                        }\n                        else {\n                            castTimeCol = '$timeColumn';\n                        }\n                        castTimeCol += ' * 1000';\n                        options.annotation.query =\n                            'SELECT ' +\n                                castTimeCol + ' AS \"time\", ' +\n                                (options.annotation.tags || 'NULL') + ' AS \"tags\", ' +\n                                (options.annotation.title || 'NULL') + ' AS \"title\", ' +\n                                (options.annotation.text || 'NULL') + ' AS \"text\" ' +\n                                'FROM ' + options.annotation.schema + '.' + options.annotation.table + ' ' +\n                                'WHERE $timeFilter';\n                    }\n                    var query = options.annotation.query;\n                    query = this._replaceQueryVars(query, options, options.annotation);\n                    query = this.templateSrv.replace(query, null, 'regex');\n                    return this._seriesQuery(query).then(function (data) {\n                        if (!data || !data.results || !data.results[0]) {\n                            throw { message: 'No results in response from SqlDB' };\n                        }\n                        return new sql_series_1.default({ series: data.results[0].series, annotation: options.annotation }).getAnnotations();\n                    });\n                };\n                ;\n                SqlDatasource.prototype.metricFindQuery = function (query) {\n                    var interpolated;\n                    try {\n                        interpolated = this.templateSrv.replace(query, null, 'regex');\n                    }\n                    catch (err) {\n                        return this.$q.reject(err);\n                    }\n                    return this._seriesQuery(interpolated)\n                        .then(lodash_1.default.curry(this.responseParser.parse)(query));\n                };\n                ;\n                SqlDatasource.prototype._seriesQuery = function (query) {\n                    return this._sqlRequest('POST', '/query', { query: query, epoch: 'ms' });\n                };\n                SqlDatasource.prototype.serializeParams = function (params) {\n                    if (!params) {\n                        return '';\n                    }\n                    return lodash_1.default.reduce(params, function (memo, value, key) {\n                        if (value === null || value === undefined) {\n                            return memo;\n                        }\n                        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n                        return memo;\n                    }, []).join(\"&\");\n                };\n                SqlDatasource.prototype.testDatasource = function () {\n                    return this.metricFindQuery('SELECT 1 AS num').then(function () {\n                        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n                    });\n                };\n                SqlDatasource.prototype._sqlRequest = function (method, url, data) {\n                    var self = this;\n                    var options = {\n                        method: method,\n                        url: this.url + url,\n                        data: data,\n                        precision: \"ms\",\n                        inspect: { type: 'sqldb' },\n                        paramSerializer: this.serializeParams,\n                    };\n                    return this.backendSrv.datasourceRequest(options).then(function (result) {\n                        return result.data;\n                    }, function (err) {\n                        if (err.status !== 0 || err.status >= 300) {\n                            if (err.data && err.data.error) {\n                                throw { message: 'SqlDB Error Response: ' + err.data.error, data: err.data, config: err.config };\n                            }\n                            else {\n                                throw { message: 'SqlDB Error: ' + err.message, data: err.data, config: err.config };\n                            }\n                        }\n                    });\n                };\n                ;\n                SqlDatasource.prototype._replaceQueryVars = function (query, options, target) {\n                    var from = this._getSubTimestamp(options.rangeRaw.from, target.timeDataType, false);\n                    var to = this._getSubTimestamp(options.rangeRaw.to, target.timeDataType, true);\n                    var isToNow = (options.rangeRaw.to === 'now');\n                    var timeFilter = this._getTimeFilter(isToNow);\n                    query = query.replace(/\\$timeFilter/g, timeFilter);\n                    query = query.replace(/\\$from/g, from);\n                    query = query.replace(/\\$to/g, to);\n                    from = this._getSubTimestamp(options.rangeRaw.from, 'numeric', false);\n                    to = this._getSubTimestamp(options.rangeRaw.to, 'numeric', true);\n                    query = query.replace(/\\$unixFrom/g, from);\n                    query = query.replace(/\\$unixTo/g, to);\n                    from = this._getSubTimestamp(options.rangeRaw.from, 'timestamp with time zone', false);\n                    to = this._getSubTimestamp(options.rangeRaw.to, 'timestamp with time zone', true);\n                    query = query.replace(/\\$timeFrom/g, from);\n                    query = query.replace(/\\$timeTo/g, to);\n                    var unixtimeColumn = this._getRoundUnixTime(target);\n                    query = query.replace(/\\$unixtimeColumn/g, unixtimeColumn);\n                    query = query.replace(/\\$timeColumn/g, target.timeCol);\n                    var autoIntervalNum = this._getIntervalNum(target.interval || options.interval);\n                    query = query.replace(/\\$interval/g, autoIntervalNum);\n                    return query;\n                };\n                SqlDatasource.prototype._getTimeFilter = function (isToNow) {\n                    if (isToNow) {\n                        return '$timeColumn > $from';\n                    }\n                    else {\n                        return '$timeColumn > $from AND $timeColumn < $to';\n                    }\n                };\n                SqlDatasource.prototype._getSubTimestamp = function (date, toDataType, roundUp) {\n                    var rtn = null;\n                    if (lodash_1.default.isString(date)) {\n                        if (date === 'now') {\n                            switch (this._abstractDataType(toDataType)) {\n                                case 'timestamp':\n                                    return this._num2Ts('now()');\n                                case 'numeric':\n                                    return this._ts2Num('now()', 'timestamp with time zone');\n                            }\n                        }\n                        var parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n                        if (parts) {\n                            var amount = parseInt(parts[1]);\n                            var unit = parts[2];\n                            switch (this.dbms) {\n                                case 'postgres':\n                                    rtn = '(now() - \\'' + amount + unit + '\\'::interval)';\n                                    break;\n                                case \"mysql\":\n                                    var units = {\n                                        'd': 'DAY',\n                                        'h': 'HOUR',\n                                        'm': 'MINUTE',\n                                        's': 'SECOND',\n                                        'w': 'WEEK',\n                                    };\n                                    rtn = 'DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL ' + amount + ' ' + units[unit] + ')';\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                        else {\n                            date = dateMath.parse(date, roundUp);\n                        }\n                    }\n                    var isNumericDate = false;\n                    if (rtn == null) {\n                        rtn = (date.valueOf() / 1000).toFixed(0);\n                        isNumericDate = true;\n                    }\n                    switch (this._abstractDataType(toDataType)) {\n                        case 'timestamp':\n                            if (isNumericDate) {\n                                rtn = this._num2Ts(rtn);\n                            }\n                            break;\n                        case 'numeric':\n                            if (!isNumericDate) {\n                                rtn = this._ts2Num(rtn, 'timestamp with time zone');\n                            }\n                            break;\n                    }\n                    return rtn;\n                };\n                SqlDatasource.prototype._getRoundUnixTime = function (target) {\n                    var col = '$timeColumn';\n                    if (this._abstractDataType(target.timeDataType) === 'timestamp') {\n                        col = this._ts2Num(col, 'timestamp with time zone');\n                    }\n                    var rtn = col;\n                    if (target.groupBy && target.groupBy.length > 0) {\n                        var interval = this._getIntervalNum(target.groupBy[0].params[0]);\n                        switch (this.dbms) {\n                            case \"postgres\":\n                                rtn = 'round(' + col + ' / ' + interval + ') * ' + interval;\n                                break;\n                            case \"mysql\":\n                                rtn = '(' + col + ' DIV ' + interval + ') * ' + interval;\n                                break;\n                        }\n                    }\n                    return rtn;\n                };\n                SqlDatasource.prototype._num2Ts = function (str) {\n                    if (str === 'now()') {\n                        return str;\n                    }\n                    else {\n                        switch (this.dbms) {\n                            case 'postgres':\n                                return 'to_timestamp(' + str + ')';\n                            case 'mysql':\n                                return 'FROM_UNIXTIME(' + str + ')';\n                            default:\n                                return str;\n                        }\n                    }\n                };\n                SqlDatasource.prototype._ts2Num = function (str, toDataType) {\n                    switch (this.dbms) {\n                        case 'postgres':\n                            return 'extract(epoch from ' + str + '::' + this._pgShortTs(toDataType) + ')';\n                        case 'mysql':\n                            return 'UNIX_TIMESTAMP(' + str + ')';\n                        default:\n                            return str;\n                    }\n                };\n                SqlDatasource.prototype._getIntervalNum = function (str) {\n                    var rtn = str;\n                    if (str === 'auto') {\n                        return '$interval';\n                    }\n                    var parts = /^(\\d+)([a-z]*)$/.exec(str);\n                    if (parts) {\n                        var amount = parseInt(parts[1]);\n                        var unit = parts[2];\n                        // cast to seconds\n                        switch (unit) {\n                            case 'ms':\n                                rtn = amount / 1000;\n                                break;\n                            case 'm':\n                                rtn = amount * 60;\n                                break;\n                            case 'h':\n                                rtn = amount * 60 * 12;\n                                break;\n                            case 'd':\n                                rtn = amount * 60 * 12 * 24;\n                                break;\n                            case 'w':\n                                rtn = amount * 60 * 12 * 24 * 7;\n                                break;\n                            default:\n                                rtn = amount;\n                        }\n                    }\n                    return rtn;\n                };\n                SqlDatasource.prototype._abstractDataType = function (datatype) {\n                    switch (datatype) {\n                        case 'timestamp with time zone':\n                        case 'timestamp without time zone':\n                        case 'timestamp':\n                        case 'timestamptz':\n                        case 'datetime':\n                        case 'date':\n                            return 'timestamp';\n                        case 'numeric':\n                        case 'decimal':\n                        case 'bigint':\n                        case 'integer':\n                        case 'real':\n                        case 'float':\n                        case 'double':\n                        case 'double precision':\n                            return 'numeric';\n                        default:\n                            return datatype;\n                    }\n                };\n                SqlDatasource.prototype._pgShortTs = function (str) {\n                    switch (str) {\n                        case 'timestamptz':\n                        case 'timestamp with time zone':\n                            return 'timestamptz';\n                        case 'timestamp':\n                        case 'timestamp without time zone':\n                            return 'timestamp';\n                        default:\n                            return str;\n                    }\n                    ;\n                };\n                return SqlDatasource;\n            })();\n            exports_1(\"default\", SqlDatasource);\n        }\n    }\n});\n//# sourceMappingURL=datasource.js.map"]}