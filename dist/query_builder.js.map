{"version":3,"sources":["../src/public/query_builder.js"],"names":[],"mappings":"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","file":"query_builder.js","sourcesContent":["define([\n  'lodash'\n],\nfunction (_) {\n  'use strict';\n\n  function SqlQueryBuilder(target) {\n    this.target = target;\n  }\n\n  function renderTagCondition (tag, index) {\n    var str = \"\";\n    var operator = tag.operator;\n    var value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    // quote value unless regex or number\n    if (isNaN(+value)) {\n      value = \"'\" + value + \"'\";\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  var p = SqlQueryBuilder.prototype;\n\n  p.build = function() {\n    return this.target.rawQuery ? this._modifyRawQuery() : this._buildQuery();\n  };\n\n  p.buildExploreQuery = function(type, withKey) {\n    var query;\n    var table;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SELECT column_name ' +\n              'FROM information_schema.columns ' +\n              'WHERE table_schema = \\'' + this.target.schema + '\\' AND ' +\n                    'table_name = \\'' + this.target.table + '\\' ' +\n              'ORDER BY ordinal_position';\n      return query;\n\n    } else if (type === 'TAG_VALUES') {\n      query = 'SELECT distinct(' + withKey + ') ' +\n              'FROM \"' + this.target.schema + '\".\"' + this.target.table + '\" ' +\n              'ORDER BY ' + withKey;\n      return query;\n\n    } else if (type === 'TABLES') {\n      query = 'SELECT table_name ' +\n              'FROM information_schema.tables ' +\n              'WHERE table_schema = \\'' + this.target.schema + '\\' ' +\n              'ORDER BY table_name';\n      return query;\n\n    } else if (type === 'FIELDS') {\n      query = 'SELECT concat(column_name, \\' : \\', data_type)' +\n              'FROM information_schema.columns ' +\n              'WHERE table_schema = \\'' + this.target.schema + '\\' AND ' +\n                    'table_name = \\'' + this.target.table + '\\' ' +\n              'ORDER BY ordinal_position';\n      return query;\n\n    } else if (type === 'SCHEMA') {\n      query = 'SELECT DISTINCT(table_schema) AS table_schema ' +\n              'FROM information_schema.columns ' +\n              'ORDER BY table_schema';\n      return query;\n\n    } else if (type === 'SET_DEFAULT') {\n      var exceptSchemaArr = \"'information_schema', 'pg_catalog'\";\n      var numericTypes = \"'numeric', 'decimal', 'bigint', 'integer', \" +\n                         \"'double', 'double precision', 'float'\";\n\n      query = 'SELECT table_schema, table_name, ' +\n                     'concat(column_name, \\' : \\', data_type) ' +\n              'FROM information_schema.columns ' +\n              'WHERE table_schema NOT IN (' + exceptSchemaArr + ') ' +\n              'ORDER BY (data_type LIKE \\'timestamp%\\') desc, ' +\n                       '(data_type = \\'datetime\\') desc, ' +\n                       'table_schema, table_name, ' +\n                       '(data_type IN (' + numericTypes + ')) desc, ' +\n                       'ordinal_position ' +\n              'LIMIT 1';\n      return query;\n    }\n\n    if (table) {\n      if (!table.match('^/.*/') && !table.match(/^merge\\(.*\\)/)) {\n        table = '\"' + table+ '\"';\n      }\n      query += ' FROM ' + table;\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      var whereConditions = _.reduce(this.target.tags, function(memo, tag) {\n        // do not add a condition for the key we want to explore for\n        if (tag.key === withKey) {\n          return memo;\n        }\n        memo.push(renderTagCondition(tag, memo.length));\n        return memo;\n      }, []);\n\n      if (whereConditions.length > 0) {\n        query +=  ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    return query;\n  };\n\n  return SqlQueryBuilder;\n});\n"]}