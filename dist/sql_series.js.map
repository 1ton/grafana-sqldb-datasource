{"version":3,"sources":["../src/public/sql_series.js"],"names":[],"mappings":"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","file":"sql_series.js","sourcesContent":["define([\n  'lodash',\n  'app/core/table_model',\n],\nfunction (_, TableModel) {\n  'use strict';\n\n  function SqlSeries(options) {\n    this.series = options.series;\n    this.table = options.table;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n  }\n\n  var p = SqlSeries.prototype;\n\n  p.getTimeSeries = function() {\n    var output = [];\n    var self = this;\n    var i, j;\n\n    if (self.series.length === 0) {\n      return output;\n    }\n\n    _.each(self.series, function(series) {\n      var columns = series.columns.length;\n      var tags = _.map(series.tags, function(value, key) {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        var seriesName = self.table;\n        var columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (self.alias) {\n          seriesName = self._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        var datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            var sample = Number(series.values[i][j]);\n            var ts = parseFloat(series.values[i][0]);\n\n            if (isNaN(sample)) {\n              datapoints[i] = [series.values[i][j], ts];\n            } else {\n              datapoints[i] = [sample, ts];\n            }\n          }\n        }\n\n        output.push({ target: seriesName, datapoints: datapoints});\n      }\n    });\n\n    return output;\n  };\n\n  p._getSeriesName = function(series, index) {\n    var self = this;\n    var regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n\n    return this.alias.replace(regex, function(match, g1, g2) {\n      var group = g1 || g2;\n\n      if (group === 't' || group === 'table') { return self.table || series.name; }\n      if (group === 'col') { return series.columns[index]; }\n\n      return match;\n    });\n  };\n\n  p.getAnnotations = function () {\n    var list = [];\n    var self = this;\n\n    _.each(this.series, function (series) {\n      var titleCol = null;\n      var timeCol = null;\n      var tagsCol = null;\n      var textCol = null;\n\n      _.each(series.columns, function(column, index) {\n        if (column === 'time') { timeCol = index; return; }\n        if (column === 'tags') { tagsCol = index; return; }\n        if (column === 'title') { titleCol = index; return; }\n        if (column === 'text') { textCol = index; return; }\n        if (!titleCol) { titleCol = index; }\n      });\n\n      _.each(series.values, function (value) {\n        var data = {\n          annotation: self.annotation,\n          time: + new Date(parseFloat(value[timeCol])),\n          title: value[titleCol],\n          tags: value[tagsCol],\n          text: value[textCol]\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  };\n\n  p.getTable = function() {\n    var table = new TableModel.default();\n    var self = this;\n    var i, j;\n\n    if (self.series.length === 0) {\n      return table;\n    }\n\n    _.each(self.series, function(series, seriesIndex) {\n\n      if (seriesIndex === 0) {\n        table.columns.push({text: 'Time', type: 'time'});\n        _.each(_.keys(series.tags), function(key) {\n          table.columns.push({text: key});\n        });\n        for (j = 1; j < series.columns.length; j++) {\n          table.columns.push({text: series.columns[j]});\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          var values = series.values[i];\n          var reordered = [parseFloat(values[0])];\n          if (series.tags) {\n            for (var key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n\n          var float_v = null;\n          for (j = 1; j < values.length; j++) {\n            float_v = parseFloat(values[j]);\n            if (isNaN(float_v)) {\n              reordered.push(values[j]);\n            } else {\n              reordered.push(float_v);\n            }\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  };\n\n  return SqlSeries;\n});\n"]}